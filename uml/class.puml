@startuml

package Server {
    class Server {
        #ServerSocket server
        -ArrayList<combinedGames> allGames
        #makeServer()
        #serverLopp()
    }
    class ServerThread {
        #String line
        #BufferedReader input
        #PrintWriter output
        -PrintWriter player2
        -ServerParser parser
        -Game game
        CombinedGame sharedGame

        #connect(Socket socket)
        #readInput()
        +setPlayer2()
        +run()
        -playJoin()
        -playBot()
        -Game createGame()
    }
    package Game {
        class Game {
            ~BoardField[][] fields
            -boolean blackPassed
            -boolean whitePassed
            -boolean blackTurn
            -String id
            -Bot aiBot
            -int boardSize

            ---
            -randomID()
            ---
            +String getID()
            +boolean getBot()
            +getSize()
            ---
            +Point botMove()
            +boolean won()
            +String move(Point)
            ---
            -pass()
            -unPass()
            == Rules ==
            +validateMove(Point)
            +countWinner()
            -int capture(Point)
            -boolean dead(Point)
            -boolean occupied(Point)
            -boolean koViolation(Point)
            -int countTerritory(BoardField color)
        }
        class Bot {
            -Game game
            ~Point bestMove()
            -int evaluatePoint()
        }
        Bot -* Game
    }
    package parser {
        interface ServerParser{
            setLine()
            Point parsePoint()
            GameConfig parseGameConfig()
            String parseMoveResponse()
            String parseWinner()
            String prepareGameConfig(int size)
            String PrepareGames(ArrayList<combinedGame> games)
        }
        class ServerParserJson {
            -String parsedLine
            -- implemened functions --
            +setLine()
            +Point parsePoint()
            +GameConfig parseGameConfig()
            +String parseMoveResponse()
            +String parseWinner()
            +String prepareGameConfig(int size)
            +String PrepareGames(ArrayList<combinedGame> games)
        }

        ServerParser <|..ServerParserJson
    }
    package Blocks {
        class ColoredPoint {
            BoardField color
            +get()
            +set()
        }
        enum BoardField {
            BLACK
            WHITE
            WMPTY
        }
        class CombinedGame {
            -Game game
            -ServerThread player
            +get()
        }
        class GameConfig {
            -boolean bot
            -int size
            -String id
            +get();
        }
        class Point {
            -int x
            -int y
            +get()
            +set()
        }
        Point <|-- ColoredPoint
    }

    ServerParser - ServerThread
    Server -- ServerThread
    ServerThread -- Game
    Game .. Point
    ServerParser .. ColoredPoint
    Game .. ColoredPoint
    ServerThread .. GameConfig
    Server .. CombinedGame
    ColoredPoint o-- BoardField
    Game .. BoardField
    Bot .. ColoredPoint
}

package Client {
    class Client {
        #String line
        #PrintWriter output
        #BufferedReader input
        -boolean reading
        -GameFrame gameFrame
        -ClientParser parser
        ---
        #connect()
        #readInput()
        +isReading()
        ---
        +startLobby()
        +startSizeFrame()
        +joinGame()
        +createGame(boolean bot, int size)
        +makeMove(int x, int y)
    }
    package Parser {
        interface ClientParser {
            String prepareMove(int x, int y)
            String prepareGameConfig(boolean bot, int size)
            ArrayList<ColoredPoint> parseResponse(String line)
            String prepareGameConfig(String id)
            int parseGameConfig(String line)
            ArrayList<String> parseGames(String line)
        }
        class ClientParserJson {
            -- implemented functions --
            +String prepareMove(int x, int y)
            +String prepareGameConfig(boolean bot, int size)
            +ArrayList<ColoredPoint> parseResponse(String line)
            +String prepareGameConfig(String id)
            +int parseGameConfig(String line)
            +ArrayList<String> parseGames(String line)
        }
        ClientParser <|.. ClientParserJson
    }
    package Observer {
        interface Observer {
            onEvent(ObservableEvent)
        }
        interface Observable {
            addObserver(Observer)
            removeObserver()
        }
        class ObservableEvent {
            -int x
            -int y
            -boolean bot
            -int size
            -String id

            +get()
        }
        class LobbyObserver {
            -Client client
        }
        class SizeFrameObserver {
            -Client client
        }
        class GameFrameObserver {
            -Client client
        }
        Observer <|.. GameFrameObserver
        Observer <|.. LobbyObserver
        Observer <|.. SizeFrameObserver
        ObservableEvent .. SizeFrameObserver
        ObservableEvent .. GameFrameObserver
        ObservableEvent .. LobbyObserver
    }
    package frames {
        package elements {
            class ButtonCoordinated {
                -int coordinateX
                -int coordinateY

                +set()
                +get()
                +changeColor(Color)
            }
            enum FieldColor {
                BLACK
                WHITE
                EMPTY
            }
        }
        class GameFrame {
            -boolean win
            -Observer observer
            -boolean blackTurn
            -ArrayList<ButtonCoordinated> fields

            -- Observer functions --
            +addObserver(Observer)
            +removeObserver()
            ---
            +makeMove(Point)
            +updateState(ArrayList<ColoredPoint> changes)
            -pass()
            -updateTurn()
            -winner()
        }
        class Lobby {
            -Observer observer
            -- observable functions --
            +addObserver(Observer)
            +removeObserver()
        }
        class SizeFrame {
            -boolean bot
            -int size
            -Observer observer
            ---
            -accept()
            -- observabele functions --
            +addObserver(Observer)
            -removeObserver()
        }

    }

    Observable <|... Lobby
    Observable <|... GameFrame
    Observable <|... SizeFrame
    LobbyObserver -- Lobby
    LobbyObserver -- Client
    SizeFrameObserver -- SizeFrame
    SizeFrameObserver -- Client
    GameFrameObserver -- GameFrame
    GameFrameObserver -- Client
    Client -- ClientParser
    GameFrame -- FieldColor
    GameFrame -- ButtonCoordinated

}

Server <- Client
Client <- Server

@enduml